---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: image-build
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.

  params:
  - name: IMAGE
    description: Reference of the image buildah will produce.
  - name: BUILDER_IMAGE
    description: The location of the buildah builder image.
    default: registry.redhat.io/rhel8/buildah@sha256:3c2ea396a114221575a4031d90d28c43563f7b96288374e0ba8b22de3ed97b5a
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: vfs
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: Path to the directory to use as context.
    default: .
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: FORMAT
    description: The format of the built container, oci or docker
    default: "oci"
  - name: BUILD_EXTRA_ARGS
    description: Extra parameters passed for the build command when building images. WARNING - must be sanitized to avoid command injection
    default: ""
  - name: PUSH_EXTRA_ARGS
    description: Extra parameters passed for the push command when pushing images. WARNING - must be sanitized to avoid command injection
    type: string
    default: ""
  - name: SKIP_PUSH
    description: Skip pushing the built image
    default: "false"
  - name: BUILD_ARGS
    description: Dockerfile build arguments, array of key=value
    type: array
    default:
    - ""
  workspaces:
  - name: source
  - name: dockerconfig
    description: >-
      An optional workspace that allows providing a .docker/config.json file
      for Buildah to access the container registry.
      The file should be placed at the root of the Workspace with name config.json
      or .dockerconfigjson.
    optional: true
  - description: >-
      An optional workspace that allows providing the entitlement keys
      for Buildah to access subscription. The mounted workspace contains
      entitlement.pem and entitlement-key.pem.
    name: rhel-entitlement
    optional: true
    mountPath: /tmp/entitlement

  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: Image repository where the built image would be pushed to

  steps:
  - name: build-and-push
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    env:
    - name: PARAM_IMAGE
      value: $(params.IMAGE)
    - name: PARAM_STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: PARAM_DOCKERFILE
      value: $(params.DOCKERFILE)
    - name: PARAM_CONTEXT
      value: $(params.CONTEXT)
    - name: PARAM_TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: PARAM_FORMAT
      value: $(params.FORMAT)
    - name: PARAM_BUILD_EXTRA_ARGS
      value: $(params.BUILD_EXTRA_ARGS)
    - name: PARAM_PUSH_EXTRA_ARGS
      value: $(params.PUSH_EXTRA_ARGS)
    - name: PARAM_SKIP_PUSH
      value: $(params.SKIP_PUSH)
    args:
    - $(params.BUILD_ARGS[*])
    script: |
      BUILD_ARGS=()
      for buildarg in "$@"
      do
        BUILD_ARGS+=("--build-arg=$buildarg")
      done

      ENTITLEMENT_VOLUME=""

      if [[ "$(workspaces.rhel-entitlement.bound)" == "true" ]]; then
        ENTITLEMENT_VOLUME="--volume /tmp/entitlement:/etc/pki/entitlement"
      fi

      buildah bud "--storage-driver=${PARAM_STORAGE_DRIVER}" "${BUILD_ARGS[@]}" \
        $ENTITLEMENT_VOLUME ${PARAM_BUILD_EXTRA_ARGS} \
        "--format=${PARAM_FORMAT}" "--tls-verify=${PARAM_TLSVERIFY}" \
        -f "${PARAM_DOCKERFILE}" -t "${PARAM_IMAGE}" "${PARAM_CONTEXT}"

      [[ "${PARAM_SKIP_PUSH}" == "true" ]] && echo "Push skipped" && exit 0

      if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

        # if config.json exists at workspace root, we use that
        if test -f "$(workspaces.dockerconfig.path)/config.json"; then
          export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

        # else we look for .dockerconfigjson at the root
        elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
          cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
          export DOCKER_CONFIG="$HOME/.docker"

        # need to error out if neither files are present
        else
          echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
          exit 1
        fi
      fi

      buildah "--storage-driver=${PARAM_STORAGE_DRIVER}" push \
        ${PARAM_PUSH_EXTRA_ARGS} "--tls-verify=${PARAM_TLSVERIFY}" \
        --digestfile /tmp/image-digest "${PARAM_IMAGE}" \
        "docker://${PARAM_IMAGE}"
      cat /tmp/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "${PARAM_IMAGE}" | tee $(results.IMAGE_URL.path)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      capabilities:
        add: ["SETFCAP"]
  volumes:
  - name: varlibcontainers
    emptyDir: {}
